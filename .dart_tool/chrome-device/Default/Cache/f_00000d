define(['dart_sdk', 'packages/bloc/src/bloc_observer.dart', 'packages/bloc/src/transition.dart'], (function load__packages__hydrated_bloc__src__hydrated_bloc_dart(dart_sdk, packages__bloc__src__bloc_observer$46dart, packages__bloc__src__transition$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const bloc = packages__bloc__src__bloc_observer$46dart.src__bloc;
  const transition = packages__bloc__src__transition$46dart.src__transition;
  var hydrated_bloc = Object.create(dart.library);
  var hydrated_bloc$ = Object.create(dart.library);
  var $map = dartx.map;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $isFinite = dartx.isFinite;
  var $isEmpty = dartx.isEmpty;
  var $sublist = dartx.sublist;
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $removeLast = dartx.removeLast;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    voidToNull: () => (T.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    MapN: () => (T.MapN = dart.constFn(dart.nullable(core.Map)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    MapEntryOfString$dynamic: () => (T.MapEntryOfString$dynamic = dart.constFn(core.MapEntry$(core.String, dart.dynamic)))(),
    dynamicAnddynamicToMapEntryOfString$dynamic: () => (T.dynamicAnddynamicToMapEntryOfString$dynamic = dart.constFn(dart.fnType(T.MapEntryOfString$dynamic(), [dart.dynamic, dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: hydrated_bloc.StorageNotFound.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: hydrated_bloc.NIL.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: hydrated_bloc._Outcome.prototype,
        [_name$]: "_Outcome.atomic",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: hydrated_bloc._Outcome.prototype,
        [_name$]: "_Outcome.complex",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.constList([C[2] || CT.C2, C[3] || CT.C3], hydrated_bloc._Outcome);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/hydrated_bloc-7.0.1/lib/src/hydrated_bloc.dart",
    "package:hydrated_bloc/src/hydrated_bloc.dart"
  ];
  var _state = dart.privateName(hydrated_bloc, "HydratedMixin._state");
  var _seen = dart.privateName(hydrated_bloc, "HydratedMixin._seen");
  var _state$ = dart.privateName(hydrated_bloc, "_state");
  var _seen$ = dart.privateName(hydrated_bloc, "_seen");
  var _toJson = dart.privateName(hydrated_bloc, "_toJson");
  var _fromJson = dart.privateName(hydrated_bloc, "_fromJson");
  var _traverseRead = dart.privateName(hydrated_bloc, "_traverseRead");
  var _cast = dart.privateName(hydrated_bloc, "_cast");
  var _traverseWrite = dart.privateName(hydrated_bloc, "_traverseWrite");
  var _traverseAtomicJson = dart.privateName(hydrated_bloc, "_traverseAtomicJson");
  var _traverseComplexJson = dart.privateName(hydrated_bloc, "_traverseComplexJson");
  var _checkCycle = dart.privateName(hydrated_bloc, "_checkCycle");
  var _toEncodable = dart.privateName(hydrated_bloc, "_toEncodable");
  var _traverseJson = dart.privateName(hydrated_bloc, "_traverseJson");
  var _removeSeen = dart.privateName(hydrated_bloc, "_removeSeen");
  const _is_HydratedMixin_default = Symbol('_is_HydratedMixin_default');
  hydrated_bloc.HydratedMixin$ = dart.generic(State => {
    var ChangeOfState = () => (ChangeOfState = dart.constFn(transition.Change$(State)))();
    class HydratedMixin extends bloc.BlocBase$(State) {}
    HydratedMixin[dart.mixinOn] = BlocBase => class HydratedMixin extends BlocBase {
      get [_state$]() {
        return this[_state];
      }
      set [_state$](value) {
        this[_state] = value;
      }
      get [_seen$]() {
        return this[_seen];
      }
      set [_seen$](value) {
        super[_seen$] = value;
      }
      hydrate() {
        let storage = hydrated_bloc.HydratedBloc.storage;
        try {
          let stateJson = this[_toJson](this.state);
          if (stateJson != null) {
            storage.write(this.storageToken, stateJson).then(core.Null, dart.fn(_ => {
            }, T.voidToNull()), {onError: dart.bind(this, 'onError')});
          }
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this.onError(error, stackTrace);
          } else
            throw e;
        }
      }
      get state() {
        let storage = hydrated_bloc.HydratedBloc.storage;
        if (this[_state$] != null) return dart.nullCheck(this[_state$]);
        try {
          let stateJson = T.MapN().as(storage.read(this.storageToken));
          if (stateJson == null) {
            this[_state$] = super.state;
            return super.state;
          }
          let cachedState = this[_fromJson](stateJson);
          if (cachedState == null) {
            this[_state$] = super.state;
            return super.state;
          }
          this[_state$] = cachedState;
          return cachedState;
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this.onError(error, stackTrace);
            this[_state$] = super.state;
            return super.state;
          } else
            throw e;
        }
      }
      onChange(change) {
        ChangeOfState().as(change);
        super.onChange(change);
        let storage = hydrated_bloc.HydratedBloc.storage;
        let state = change.nextState;
        try {
          let stateJson = this[_toJson](state);
          if (stateJson != null) {
            storage.write(this.storageToken, stateJson).then(core.Null, dart.fn(_ => {
            }, T.voidToNull()), {onError: dart.bind(this, 'onError')});
          }
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this.onError(error, stackTrace);
          } else
            throw e;
        }
        this[_state$] = state;
      }
      [_fromJson](json) {
        let t3;
        let traversedJson = this[_traverseRead](json);
        let castJson = this[_cast](T.MapOfString$dynamic(), traversedJson);
        return this.fromJson((t3 = castJson, t3 == null ? new (T.IdentityMapOfString$dynamic()).new() : t3));
      }
      [_toJson](state) {
        return this[_cast](T.MapOfString$dynamic(), this[_traverseWrite](this.toJson(state)).value);
      }
      [_traverseRead](value) {
        if (core.Map.is(value)) {
          return value[$map](core.String, dart.dynamic, dart.fn((key, value) => {
            let t3;
            return new (T.MapEntryOfString$dynamic()).__((t3 = this[_cast](core.String, key), t3 == null ? "" : t3), this[_traverseRead](value));
          }, T.dynamicAnddynamicToMapEntryOfString$dynamic()));
        }
        if (core.List.is(value)) {
          for (let i = 0; i < value[$length]; i = i + 1) {
            value[$_set](i, this[_traverseRead](value[$_get](i)));
          }
        }
        return value;
      }
      [_cast](T, x) {
        return T.is(x) ? x : null;
      }
      [_traverseWrite](value) {
        let traversedAtomicJson = this[_traverseAtomicJson](value);
        if (!hydrated_bloc.NIL.is(traversedAtomicJson)) {
          return new hydrated_bloc._Traversed.atomic(traversedAtomicJson);
        }
        let traversedComplexJson = this[_traverseComplexJson](value);
        if (!hydrated_bloc.NIL.is(traversedComplexJson)) {
          return new hydrated_bloc._Traversed.complex(traversedComplexJson);
        }
        try {
          this[_checkCycle](value);
          let customJson = this[_toEncodable](value);
          let traversedCustomJson = this[_traverseJson](customJson);
          if (hydrated_bloc.NIL.is(traversedCustomJson)) {
            dart.throw(new hydrated_bloc.HydratedUnsupportedError.new(value));
          }
          this[_removeSeen](value);
          return new hydrated_bloc._Traversed.complex(traversedCustomJson);
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (hydrated_bloc.HydratedCyclicError.is(ex)) {
            let e = ex;
            dart.throw(new hydrated_bloc.HydratedUnsupportedError.new(value, {cause: e}));
          } else if (hydrated_bloc.HydratedUnsupportedError.is(ex)) {
            dart.rethrow(e$);
          } else if (core.Object.is(ex)) {
            let e = ex;
            dart.throw(new hydrated_bloc.HydratedUnsupportedError.new(value, {cause: e}));
          } else
            throw e$;
        }
      }
      [_traverseAtomicJson](object) {
        if (typeof object == 'number') {
          if (!object[$isFinite]) return C[1] || CT.C1;
          return object;
        } else if (object === true) {
          return true;
        } else if (object === false) {
          return false;
        } else if (object == null) {
          return null;
        } else if (typeof object == 'string') {
          return object;
        }
        return C[1] || CT.C1;
      }
      [_traverseComplexJson](object) {
        let t5;
        if (core.List.is(object)) {
          if (object[$isEmpty]) return object;
          this[_checkCycle](object);
          let list = null;
          for (let i = 0; i < object[$length]; i = i + 1) {
            let traversed = this[_traverseWrite](object[$_get](i));
            list == null ? list = traversed.outcome === hydrated_bloc._Outcome.atomic ? object[$sublist](0) : (t5 = [], (() => {
              t5[$length] = object[$length];
              return t5;
            })()) : null;
            list[$_set](i, traversed.value);
          }
          this[_removeSeen](object);
          return list;
        } else if (core.Map.is(object)) {
          this[_checkCycle](object);
          let map = new (T.IdentityMapOfString$dynamic()).new();
          object[$forEach](dart.fn((key, value) => {
            let castKey = this[_cast](core.String, key);
            if (castKey != null) {
              map[$_set](castKey, this[_traverseWrite](value).value);
            }
          }, T.dynamicAnddynamicTovoid()));
          this[_removeSeen](object);
          return map;
        }
        return C[1] || CT.C1;
      }
      [_traverseJson](object) {
        let traversedAtomicJson = this[_traverseAtomicJson](object);
        return !hydrated_bloc.NIL.is(traversedAtomicJson) ? traversedAtomicJson : this[_traverseComplexJson](object);
      }
      [_toEncodable](object) {
        return dart.dsend(object, 'toJson', []);
      }
      [_checkCycle](object) {
        for (let i = 0; i < this[_seen$][$length]; i = i + 1) {
          if (core.identical(object, this[_seen$][$_get](i))) {
            dart.throw(new hydrated_bloc.HydratedCyclicError.new(object));
          }
        }
        this[_seen$][$add](object);
      }
      [_removeSeen](object) {
        if (!this[_seen$][$isNotEmpty]) dart.assertFailed(null, I[0], 299, 12, "_seen.isNotEmpty");
        if (!core.identical(this[_seen$][$last], object)) dart.assertFailed(null, I[0], 300, 12, "identical(_seen.last, object)");
        this[_seen$][$removeLast]();
      }
      get id() {
        return "";
      }
      get storageToken() {
        return this[$runtimeType].toString() + this.id;
      }
      clear() {
        return hydrated_bloc.HydratedBloc.storage.delete(this.storageToken);
      }
    };
    (HydratedMixin[dart.mixinNew] = function() {
      this[_state] = null;
      this[_seen] = [];
    }).prototype = HydratedMixin.prototype;
    dart.addTypeTests(HydratedMixin);
    HydratedMixin.prototype[_is_HydratedMixin_default] = true;
    dart.addTypeCaches(HydratedMixin);
    HydratedMixin[dart.implements] = () => [bloc.BlocBase$(State)];
    dart.setMethodSignature(HydratedMixin, () => ({
      __proto__: dart.getMethods(HydratedMixin.__proto__),
      hydrate: dart.fnType(dart.void, []),
      [_fromJson]: dart.fnType(dart.nullable(State), [dart.dynamic]),
      [_toJson]: dart.fnType(dart.nullable(core.Map$(core.String, dart.dynamic)), [State]),
      [_traverseRead]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [_cast]: dart.gFnType(T => [dart.nullable(T), [dart.dynamic]], T => [dart.nullable(core.Object)]),
      [_traverseWrite]: dart.fnType(hydrated_bloc._Traversed, [dart.nullable(core.Object)]),
      [_traverseAtomicJson]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [_traverseComplexJson]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [_traverseJson]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [_toEncodable]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [_checkCycle]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_removeSeen]: dart.fnType(dart.void, [dart.dynamic]),
      clear: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(HydratedMixin, () => ({
      __proto__: dart.getGetters(HydratedMixin.__proto__),
      id: core.String,
      storageToken: core.String
    }));
    dart.setLibraryUri(HydratedMixin, I[1]);
    dart.setFieldSignature(HydratedMixin, () => ({
      __proto__: dart.getFields(HydratedMixin.__proto__),
      [_state$]: dart.fieldType(dart.nullable(State)),
      [_seen$]: dart.finalFieldType(core.List)
    }));
    return HydratedMixin;
  });
  hydrated_bloc.HydratedMixin = hydrated_bloc.HydratedMixin$();
  dart.addTypeTests(hydrated_bloc.HydratedMixin, _is_HydratedMixin_default);
  const _is_HydratedBloc_default = Symbol('_is_HydratedBloc_default');
  hydrated_bloc.HydratedBloc$ = dart.generic((Event, State) => {
    const Bloc_HydratedMixin$36 = class Bloc_HydratedMixin extends bloc.Bloc$(Event, State) {};
    (Bloc_HydratedMixin$36.new = function(initialState) {
      hydrated_bloc.HydratedMixin$(State)[dart.mixinNew].call(this);
      Bloc_HydratedMixin$36.__proto__.new.call(this, initialState);
    }).prototype = Bloc_HydratedMixin$36.prototype;
    dart.applyMixin(Bloc_HydratedMixin$36, hydrated_bloc.HydratedMixin$(State));
    class HydratedBloc extends Bloc_HydratedMixin$36 {
      static set storage(storage) {
        return hydrated_bloc.HydratedBloc._storage = storage;
      }
      static get storage() {
        if (hydrated_bloc.HydratedBloc._storage == null) dart.throw(C[0] || CT.C0);
        return dart.nullCheck(hydrated_bloc.HydratedBloc._storage);
      }
    }
    (HydratedBloc.new = function(state) {
      HydratedBloc.__proto__.new.call(this, state);
      this.hydrate();
    }).prototype = HydratedBloc.prototype;
    dart.addTypeTests(HydratedBloc);
    HydratedBloc.prototype[_is_HydratedBloc_default] = true;
    dart.addTypeCaches(HydratedBloc);
    dart.setLibraryUri(HydratedBloc, I[1]);
    return HydratedBloc;
  });
  hydrated_bloc.HydratedBloc = hydrated_bloc.HydratedBloc$();
  dart.defineLazy(hydrated_bloc.HydratedBloc, {
    /*hydrated_bloc.HydratedBloc._storage*/get _storage() {
      return null;
    },
    set _storage(_) {}
  }, false);
  dart.addTypeTests(hydrated_bloc.HydratedBloc, _is_HydratedBloc_default);
  const _is_HydratedCubit_default = Symbol('_is_HydratedCubit_default');
  hydrated_bloc.HydratedCubit$ = dart.generic(State => {
    const Cubit_HydratedMixin$36 = class Cubit_HydratedMixin extends bloc.Cubit$(State) {};
    (Cubit_HydratedMixin$36.new = function(initialState) {
      hydrated_bloc.HydratedMixin$(State)[dart.mixinNew].call(this);
      Cubit_HydratedMixin$36.__proto__.new.call(this, initialState);
    }).prototype = Cubit_HydratedMixin$36.prototype;
    dart.applyMixin(Cubit_HydratedMixin$36, hydrated_bloc.HydratedMixin$(State));
    class HydratedCubit extends Cubit_HydratedMixin$36 {}
    (HydratedCubit.new = function(state) {
      HydratedCubit.__proto__.new.call(this, state);
      this.hydrate();
    }).prototype = HydratedCubit.prototype;
    dart.addTypeTests(HydratedCubit);
    HydratedCubit.prototype[_is_HydratedCubit_default] = true;
    dart.addTypeCaches(HydratedCubit);
    dart.setLibraryUri(HydratedCubit, I[1]);
    return HydratedCubit;
  });
  hydrated_bloc.HydratedCubit = hydrated_bloc.HydratedCubit$();
  dart.addTypeTests(hydrated_bloc.HydratedCubit, _is_HydratedCubit_default);
  var unsupportedObject$ = dart.privateName(hydrated_bloc, "HydratedUnsupportedError.unsupportedObject");
  var cause$ = dart.privateName(hydrated_bloc, "HydratedUnsupportedError.cause");
  hydrated_bloc.HydratedUnsupportedError = class HydratedUnsupportedError extends core.Error {
    get unsupportedObject() {
      return this[unsupportedObject$];
    }
    set unsupportedObject(value) {
      super.unsupportedObject = value;
    }
    get cause() {
      return this[cause$];
    }
    set cause(value) {
      super.cause = value;
    }
    toString() {
      let safeString = core.Error.safeToString(this.unsupportedObject);
      let prefix = this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:";
      return prefix + " " + safeString;
    }
  };
  (hydrated_bloc.HydratedUnsupportedError.new = function(unsupportedObject, opts) {
    let cause = opts && 'cause' in opts ? opts.cause : null;
    this[unsupportedObject$] = unsupportedObject;
    this[cause$] = cause;
    hydrated_bloc.HydratedUnsupportedError.__proto__.new.call(this);
    ;
  }).prototype = hydrated_bloc.HydratedUnsupportedError.prototype;
  dart.addTypeTests(hydrated_bloc.HydratedUnsupportedError);
  dart.addTypeCaches(hydrated_bloc.HydratedUnsupportedError);
  dart.setLibraryUri(hydrated_bloc.HydratedUnsupportedError, I[1]);
  dart.setFieldSignature(hydrated_bloc.HydratedUnsupportedError, () => ({
    __proto__: dart.getFields(hydrated_bloc.HydratedUnsupportedError.__proto__),
    unsupportedObject: dart.finalFieldType(dart.nullable(core.Object)),
    cause: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(hydrated_bloc.HydratedUnsupportedError, ['toString']);
  hydrated_bloc.HydratedCyclicError = class HydratedCyclicError extends hydrated_bloc.HydratedUnsupportedError {
    toString() {
      return "Cyclic error while state traversing";
    }
  };
  (hydrated_bloc.HydratedCyclicError.new = function(object) {
    hydrated_bloc.HydratedCyclicError.__proto__.new.call(this, object);
    ;
  }).prototype = hydrated_bloc.HydratedCyclicError.prototype;
  dart.addTypeTests(hydrated_bloc.HydratedCyclicError);
  dart.addTypeCaches(hydrated_bloc.HydratedCyclicError);
  dart.setLibraryUri(hydrated_bloc.HydratedCyclicError, I[1]);
  dart.defineExtensionMethods(hydrated_bloc.HydratedCyclicError, ['toString']);
  hydrated_bloc.StorageNotFound = class StorageNotFound extends core.Object {
    toString() {
      return "Storage was accessed before it was initialized.\n" + "Please ensure that storage has been initialized.\n\n" + "For example:\n\n" + "HydratedBloc.storage = await HydratedStorage.build();";
    }
  };
  (hydrated_bloc.StorageNotFound.new = function() {
    ;
  }).prototype = hydrated_bloc.StorageNotFound.prototype;
  dart.addTypeTests(hydrated_bloc.StorageNotFound);
  dart.addTypeCaches(hydrated_bloc.StorageNotFound);
  hydrated_bloc.StorageNotFound[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(hydrated_bloc.StorageNotFound, I[1]);
  dart.defineExtensionMethods(hydrated_bloc.StorageNotFound, ['toString']);
  hydrated_bloc.NIL = class NIL extends core.Object {};
  (hydrated_bloc.NIL.new = function() {
    ;
  }).prototype = hydrated_bloc.NIL.prototype;
  dart.addTypeTests(hydrated_bloc.NIL);
  dart.addTypeCaches(hydrated_bloc.NIL);
  dart.setLibraryUri(hydrated_bloc.NIL, I[1]);
  var _name$ = dart.privateName(hydrated_bloc, "_name");
  hydrated_bloc._Outcome = class _Outcome extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (hydrated_bloc._Outcome.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = hydrated_bloc._Outcome.prototype;
  dart.addTypeTests(hydrated_bloc._Outcome);
  dart.addTypeCaches(hydrated_bloc._Outcome);
  dart.setLibraryUri(hydrated_bloc._Outcome, I[1]);
  dart.setFieldSignature(hydrated_bloc._Outcome, () => ({
    __proto__: dart.getFields(hydrated_bloc._Outcome.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(hydrated_bloc._Outcome, ['toString']);
  hydrated_bloc._Outcome.atomic = C[2] || CT.C2;
  hydrated_bloc._Outcome.complex = C[3] || CT.C3;
  hydrated_bloc._Outcome.values = C[4] || CT.C4;
  hydrated_bloc._Traversed = class _Traversed extends core.Object {};
  (hydrated_bloc._Traversed.__ = function(opts) {
    let outcome = opts && 'outcome' in opts ? opts.outcome : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this.outcome = outcome;
    this.value = value;
    ;
  }).prototype = hydrated_bloc._Traversed.prototype;
  (hydrated_bloc._Traversed.atomic = function(value) {
    hydrated_bloc._Traversed.__.call(this, {outcome: hydrated_bloc._Outcome.atomic, value: value});
  }).prototype = hydrated_bloc._Traversed.prototype;
  (hydrated_bloc._Traversed.complex = function(value) {
    hydrated_bloc._Traversed.__.call(this, {outcome: hydrated_bloc._Outcome.complex, value: value});
  }).prototype = hydrated_bloc._Traversed.prototype;
  dart.addTypeTests(hydrated_bloc._Traversed);
  dart.addTypeCaches(hydrated_bloc._Traversed);
  dart.setLibraryUri(hydrated_bloc._Traversed, I[1]);
  dart.setFieldSignature(hydrated_bloc._Traversed, () => ({
    __proto__: dart.getFields(hydrated_bloc._Traversed.__proto__),
    outcome: dart.finalFieldType(hydrated_bloc._Outcome),
    value: dart.finalFieldType(dart.dynamic)
  }));
  dart.trackLibraries("packages/hydrated_bloc/src/hydrated_bloc.dart", {
    "package:hydrated_bloc/src/hydrated_bloc.dart": hydrated_bloc,
    "package:hydrated_bloc/hydrated_bloc.dart": hydrated_bloc$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["hydrated_bloc.dart","../../../bloc-7.1.0/lib/src/bloc.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/hydrated_bloc/src/hydrated_bloc.dart.lib.js"}');
  // Exports:
  return {
    src__hydrated_bloc: hydrated_bloc,
    hydrated_bloc: hydrated_bloc$
  };
}));

//# sourceMappingURL=hydrated_bloc.dart.lib.js.map
